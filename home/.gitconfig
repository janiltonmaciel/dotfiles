[user]
	name = Janilton Maciel
	email = janilton@gmail.com
	#useConfigOnly = true

[include]
	path = ~/.gitconfig.local

[alias]

	# LOGS
	ll   = log --pretty=oneline --decorate --abbrev-commit --max-count=20
	l = log --pretty=oneline -n 20 --graph --abbrev-commit
	la   = log --max-count=20 --color --pretty=format:'%C(yellow)%G?%Creset %Cred%h%Creset %Cgreen%ci (%cr)%Creset %C(bold blue)%ae%Creset %C(auto)%d%Creset- %s'
	lol   = log --color --pretty=format:'%C(yellow)%G?%Creset %Cred%h%Creset %Cgreen%ci (%cr)%Creset %C(bold blue)%ae%Creset %C(auto)%d%Creset- %s'
	lg   = log --oneline --all --decorate --graph
	lag  = log --graph --color --pretty=format:'%Cred%h%Creset %Cgreen%ci (%cr)%Creset %C(bold blue)%an%Creset %C(auto)%d%Creset- %s'

	gr = "!f() { git grep -n $1; }; f"
	logdiff = "!f() { git log `git rev-parse --abbrev-ref HEAD` --not $1; }; f"
	synctags = !git tag | xargs -n1 git tag -d && git fetch --tags
  	tags = tag --sort=version:refname
	st = status
	ci = commit
	br = branch
	pl = pull
	co = checkout
	df = diff
	pu = push
	g = grep --break --heading --line-number
	gi = grep --break --heading --line-number -i
	lc = add-rm-line-count
	changed = show --pretty=\"format:\" --name-only
	please = push --force-with-lease
	commend = commit --amend --no-edit
	lt = log --tags --decorate --simplify-by-decoration --oneline

	# View the current working tree status using the short format
	s = status -sb

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	# di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules
	# p = !"git pull; git submodule foreach git pull origin master"

	# Clone a repository including all submodules
	c = clone --recursive

	# Commit all changes
	ca = !git add -A && git commit -av

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v
	brs = for-each-ref --sort=-committerdate --format=\"%(color:blue)%(authordate:relative)\t%(color:cyan)%(authorname)\t%(color:white)%(color:bold)%(refname:short)\" refs/remotes

	# List aliases
	aliases = config --get-regexp alias

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Remove the old tag with this name and tag the latest commit with it.
	# retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Find branches containing commit
	# fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	# ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	# fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	# fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	# dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]

	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true

	editor = code --wait

[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	commit = yellow bold
	frag = magenta bold
	meta = 11
	new = green bold
	old = red bold
	whitespace = red reverse

[color "diff-highlight"]
	newHighlight = green bold 22
	newNormal = green bold
	oldHighlight = red bold 52
	oldNormal = red bold

[color "status"]
	added = green
	changed = yellow
	untracked = cyan

[diff]
	tool = vscode
	# Detect copies as well as renames
	renames = copies

[difftool "vscode"]
    cmd = code --wait --diff $LOCAL $REMOTE

[diff "bin"]
	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[help]
	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true
	tool = vscode

	conflictStyle = merge
  	ff = no
  	commit = no
  	summary = true

[mergetool "vscode"]
	cmd = "code --wait "

[push]
	# https://git-scm.com/docs/git-config#git-config-pushdefault
	default = simple
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true

[pull]
	rebase = true

[commit]
  template = ~/.gitmessage
  verbose = true

[grep]
	extendRegexp = true
	lineNumber = true

[submodule]
	fetchJobs = 4

[url "ssh://git@github.com/"]
	insteadOf = https://github.com/

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
	insteadOf = "github:"

[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
	insteadOf = "gist:"

[url "gitlab@gitlab.globoi.com:"]
  insteadOf = https://gitlab.globoi.com/
